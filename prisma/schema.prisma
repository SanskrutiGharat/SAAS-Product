// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships OrganizationMember[]
  assignedIssues Issue[] @relation("AssignedTo")

  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members OrganizationMember[]
  projects Project[]

  @@map("organizations")
}

model OrganizationMember {
  id             String @id @default(cuid())
  role           Role   @default(MEMBER)
  organizationId String
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model Project {
  id             String @id @default(cuid())
  name           String
  key            String @unique
  description    String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sprints      Sprint[]

  @@map("projects")
}

model Sprint {
  id          String       @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  status      SprintStatus @default(PLANNED)
  projectId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  project Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  issues  Issue[]

  @@map("sprints")
}

model Issue {
  id          String      @id @default(cuid())
  title       String
  description String?
  priority    Priority    @default(MEDIUM)
  status      IssueStatus @default(TODO)
  order       Int
  sprintId    String
  assigneeId  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  sprint   Sprint @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  assignee User?  @relation("AssignedTo", fields: [assigneeId], references: [id])

  @@map("issues")
}

enum Role {
  ADMIN
  MEMBER
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
